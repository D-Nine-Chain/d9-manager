name: Build D9 Manager

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            name: linux-x64
          - target: aarch64-unknown-linux-gnu  
            name: linux-arm64
          - target: x86_64-apple-darwin
            name: macos-x64
          - target: aarch64-apple-darwin
            name: macos-arm64
          - target: x86_64-pc-windows-msvc
            name: windows-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.40.x

    - name: Cache Deno dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/deno
        key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json') }}
        restore-keys: |
          ${{ runner.os }}-deno-

    - name: Install dependencies
      run: deno cache src/main.ts

    - name: Build binary
      run: |
        mkdir -p dist
        deno compile \
          --allow-all \
          --no-check \
          --target ${{ matrix.target }} \
          --output ./dist/d9-manager-${{ matrix.name }} \
          src/main.ts

    - name: Compress binary (Linux/macOS)
      if: matrix.target != 'x86_64-pc-windows-msvc'
      run: gzip -c ./dist/d9-manager-${{ matrix.name }} > ./dist/d9-manager-${{ matrix.name }}.gz

    - name: Compress binary (Windows)
      if: matrix.target == 'x86_64-pc-windows-msvc'
      run: |
        sudo apt-get update && sudo apt-get install -y zip
        zip ./dist/d9-manager-${{ matrix.name }}.zip ./dist/d9-manager-${{ matrix.name }}.exe

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: d9-manager-${{ matrix.name }}
        path: |
          dist/d9-manager-${{ matrix.name }}*
        retention-days: 30